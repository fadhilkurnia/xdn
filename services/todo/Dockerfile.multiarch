# syntax=docker/dockerfile:1

# This Dockerfile creates the service image statically, including the sqlite
# library. We use multi stage building so the final image only contains the 
# compiled binary (~10MB), excluding the source code.

# To build the image: 
# docker build --tag=todo-simple .
# docker buildx build --platform linux/amd64,linux/arm64 --tag=todo-simple .

# ===== build stage ============================================================
FROM --platform=$BUILDPLATFORM rust:alpine AS chef
WORKDIR /app
ENV PKGCONFIG_SYSROOTDIR=/
RUN apk add --no-cache musl-dev openssl-dev zig
RUN cargo install --locked cargo-zigbuild cargo-chef
RUN rustup target add x86_64-unknown-linux-musl aarch64-unknown-linux-musl

FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Copy the source code.
FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --recipe-path recipe.json --release --zigbuild \
  --target x86_64-unknown-linux-musl --target aarch64-unknown-linux-musl
COPY Cargo.lock .
COPY Cargo.toml .
COPY src ./src
COPY static ./static
RUN mkdir -p /app/data
RUN cargo zigbuild -r \
      --target x86_64-unknown-linux-musl --target aarch64-unknown-linux-musl && \
    mkdir /app/linux && \
    cp target/aarch64-unknown-linux-musl/release/prog /app/linux/arm64 && \
    cp target/x86_64-unknown-linux-musl/release/prog /app/linux/amd64

FROM alpine:latest AS runtime
WORKDIR /app
ARG TARGETPLATFORM
COPY --from=builder /app/${TARGETPLATFORM} /app/prog
EXPOSE 80
CMD "prog"