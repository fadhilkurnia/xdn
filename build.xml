<?xml version="1.0" encoding="UTF-8"?>
<project
        name="Build file for Gigapaxos and XDN"
        basedir="."
        default="jar">

    <!-- Properties -->
    <property file="build.properties"/>

    <property name="src.dir" value="src"/>
    <property name="testsrc.dir" location="test"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.test.classes.dir" value="${build.dir}/test/classes"/>
    <property name="test.dir" value="src"/>
    <property name="build.test.dir" value="${build.dir}/test"/>
    <property name="build.jar.dir" value="jars"/>
    <property name="lib.dir" value="lib"/>
    <property name="dist.dir"
              value="gigapaxos-${build.major.number}.${build.minor.number}.${build.revision.number}"/>
    <property name="bin.dir" value="bin"/>
    <property name="conf.dir" value="conf"/>
    <property name="built.by" value="V. Arun"/>


    <path id="classpath.base">
        <pathelement location="${build.dir}"/>
        <pathelement location="${build.classes.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="init">
        <tstamp/>
        <echo>Java version: ${ant.java.version}</echo>
        <echo>Java detail version: ${java.version}</echo>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.jar.dir}"/>
    </target>

    <target name="compile" depends="init, buildnumber" description="compile java files">
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true" debuglevel="lines,vars,source"
               includeantruntime="false" release="21">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath refid="classpath.base"/>
        </javac>
    </target>

    <target name="gigapaxos_jarbuild" depends="compile" description="generate jar files for gigpaxos">
        <mkdir dir="${build.jar.dir}"/>
        <jar destfile="${build.jar.dir}/gigapaxos-${build.major.number}.${build.minor.number}.${build.revision.number}.jar"
             filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Built-By" value="${built.by}"/>
                <attribute name="Implementation-Vendor"
                           value="University of Massachusetts"/>
                <attribute name="Implementation-Title" value="GigaPaxos"/>
                <attribute name="Implementation-Version"
                           value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Build-Version" value="${version.code}"/>
            </manifest>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
            <zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>
        </jar>
    </target>

    <target name="nio_jarbuild" depends="compile" description="generate jar files for nio">
        <mkdir dir="${build.jar.dir}"/>
        <jar destfile="${build.jar.dir}/nio-${nio.build.major.number}.${nio.build.minor.number}.${nio.build.revision.number}.jar"
             filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Built-By" value="${built.by}"/>
                <attribute name="Implementation-Vendor"
                           value="University of Massachusetts"/>
                <attribute name="Implementation-Title" value="nio"/>
                <attribute name="Implementation-Version"
                           value="${nio.build.major.number}.${nio.build.minor.number}.${nio.build.revision.number}"/>
                <attribute name="Build-Version" value="${version.code}"/>
            </manifest>
            <fileset dir="${build.classes.dir}" includes="edu/umass/cs/nio/**/*.class"/>
            <fileset dir="${build.classes.dir}" includes="edu/umass/cs/utils/*.class"/>
            <fileset dir="${build.classes.dir}" includes="org/json/*.class"/>
            <!-- interesting special cases here added because of one use of ReconfigurableClient in NIOInstrumenter
            is this still needed?
            -->
            <fileset dir="${build.classes.dir}" includes="edu/umass/cs/reconfiguration/**/*.class"/>
            <fileset dir="${build.classes.dir}" includes="edu/umass/cs/gigapaxos/**/*.class"/>
            <fileset dir="${build.classes.dir}" includes="edu/umass/cs/protocoltask/**/*.class"/>
            <fileset dir="${build.classes.dir}" includes="edu/umass/cs/chainreplication/**/*.class"/>
        </jar>
    </target>

    <target name="gigapaxos_nio_src_jarbuild" depends="compile" description="generate source jar">
        <mkdir dir="${build.jar.dir}"/>
        <jar destfile="${build.jar.dir}/gigapaxos-nio-src.jar">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </jar>
    </target>

    <target name="clean" description="remove generated files">
        <delete dir="${build.dir}"/>
        <delete dir="${build.jar.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="doc" description="generate javadoc">
        <mkdir dir="${build.dir}/doc"/>
        <javadoc packagenames="edu.umass.cs.*"
                 sourcepath="${src.dir}"
                 destdir="${build.dir}/doc"
                 additionalparam="-Xdoclint:none">
            <classpath refid="classpath.base"/>
        </javadoc>
        <mkdir dir="docs/javadoc/${dist.dir}"/>
        <copy todir="docs/javadoc/${dist.dir}">
            <fileset dir="${build.dir}/doc" includes="**"/>
        </copy>
    </target>

    <target name="jar" depends="gigapaxos_jarbuild, nio_jarbuild, gigapaxos_nio_src_jarbuild">
    </target>

    <target name="dist" depends="gigapaxos_jarbuild, nio_jarbuild">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/${build.jar.dir}"/>
        <mkdir dir="${dist.dir}/${bin.dir}"/>
        <copy todir="${dist.dir}/${build.jar.dir}">
            <fileset dir="${build.jar.dir}" includes="*.jar"/>
        </copy>
        <copy todir="${dist.dir}/${bin.dir}">
            <fileset dir="${bin.dir}" includes="*"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="." includes="LICENSE.txt README.md"/>
        </copy>
        <copy todir="${dist.dir}/${conf.dir}">
            <fileset dir="conf"/>
        </copy>
    </target>

    <path id="classpath.test">
        <pathelement location="${build.classes.dir}"/>
        <pathelement location="${lib.dir}/junit-4.12.jar"/>
        <pathelement location="${lib.dir}/hamcrest-all-1.3.jar"/>
        <pathelement location="${lib.dir}/c3p0-0.9.5.jar"/>
        <pathelement location="${lib.dir}/derby.jar"/>
        <pathelement location="${lib.dir}/json-smart-1.2.jar"/>
        <pathelement location="${lib.dir}/mchange-commons-java-0.2.9.jar"/>
        <pathelement location="${lib.dir}/mapdb-2.0.0-20151103.120435-149.jar"/>
        <pathelement location="${lib.dir}/msgpack-core-0.8.8.jar"/>
        <pathelement location="${lib.dir}/jedis-2.8.1.jar"/>
        <pathelement location="${lib.dir}/netty-all-4.1.50.Final.jar"/>
        <pathelement location="${lib.dir}/protobuf-java-4.28.2.jar"/>
    </path>

    <target name="ensure-test-name" unless="test">
        <fail message="You must run this target with -Dtest=TestName"/>
    </target>

    <target name="ensure-pkg-name" unless="pkg">
        <fail message="You must run this target with -Dpkg=pattern"/>
    </target>

    <target name="ensure-class-name" unless="class">
        <fail message="You must run this target with -Dclass=classname"/>
    </target>

    <target name="compiletest" depends="compile" description="Compile all the test files">
        <mkdir dir="${build.test.dir}"/>
        <mkdir dir="${build.test.classes.dir}"/>
        <javac srcdir="${test.dir}"
               destdir="${build.test.classes.dir}"
               debug="on"
               includeantruntime="false">
            <classpath refid="classpath.test"/>
        </javac>
    </target>

    <target name="runtest"
            description="Runs the test you specify on the command line with -Dtest="
            depends="compiletest, ensure-test-name">
        <junit printsummary="withOutAndErr" fork="true" forkmode="once" showoutput="true" haltonfailure="on">
            <jvmarg value="-ea"/>
            <jvmarg value="-Djava.util.logging.config.file=logging.properties"/>
            <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.trustStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-Djavax.net.ssl.keyStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.keyStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-DgigapaxosConfig=gigapaxos.properties"/>
            <classpath>
                <pathelement location="${build.test.classes.dir}"/>
            </classpath>
            <!-- Make sure these libraries are included -->
            <classpath refid="classpath.test"/>
            <formatter type="plain" usefile="false"/>
            <batchtest>
                <fileset dir="${test.dir}">
                    <include name="**/${test}.java"/>
                </fileset>
            </batchtest>
            <batchtest>
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/${test}/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="run"
            description="Runs the test you specify on the command line with -Dclass="
            depends="jar, compiletest, ensure-class-name">
        <java classname="${class}">
            <jvmarg value="-ea"/>
            <jvmarg value="-Djava.util.logging.config.file=logging.properties"/>
            <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.trustStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-Djavax.net.ssl.keyStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.keyStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-DgigapaxosConfig=gigapaxos.properties"/>
            <classpath>
                <pathelement location="${build.test.classes.dir}"/>
            </classpath>
            <!-- Make sure these libraries are included -->
            <classpath refid="classpath.test"/>
        </java>
    </target>

    <target name="test" description="Runs the default integration test"
            depends="jar, compiletest">
        <echo message="Running reconfiguration tests, reporting the results into './out/junit4-reconfiguration-test-output' ..."/>
        <!-- prepare the tests output directory -->
        <mkdir dir="out/junit4-reconfiguration-test-output"/>
        <junit printsummary="yes" fork="yes" haltonfailure="on" showoutput="yes">
            <test name="edu.umass.cs.reconfiguration.testing.TESTReconfigurationClient"
                  todir="out/junit4-reconfiguration-test-output"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
            <jvmarg value="-ea"/>
            <jvmarg value="-Djava.util.logging.config.file=logging.properties"/>
            <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.trustStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-Djavax.net.ssl.keyStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.keyStore=conf/keyStore/node100.jks"/>
            <classpath>
                <pathelement location="${build.test.classes.dir}"/>
            </classpath>
            <!-- Make sure these libraries are included -->
            <classpath refid="classpath.test"/>
        </junit>
    </target>

    <target name="test1"
            description="Runs the default integration test"
            depends="compiletest">
        <junit printsummary="yes" fork="yes" haltonfailure="on"
               showoutput="yes">
            <test
                    name="edu.umass.cs.reconfiguration.testing.TESTRCDebug"/>
            <formatter type="plain" usefile="false"/>
            <jvmarg value="-ea"/>
            <jvmarg value="-Djava.util.logging.config.file=logging.properties"/>
            <jvmarg value="-DtestingConfig=conf/debugTesting.properties"/>
            <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
            <jvmarg
                    value="-Djavax.net.ssl.trustStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-Djavax.net.ssl.keyStorePassword=qwerty"/>
            <jvmarg
                    value="-Djavax.net.ssl.keyStore=conf/keyStore/node100.jks"/>
            <classpath>
                <pathelement location="${build.test.classes.dir}"/>
            </classpath>
            <!-- Make sure these libraries are included -->
            <classpath refid="classpath.test"/>
        </junit>
    </target>


    <target name="testMethod" description="Runs the default integration test"
            depends="jar, compiletest">
        <junit printsummary="yes" fork="yes" haltonfailure="on" showoutput="yes">
            <test name="edu.umass.cs.reconfiguration.testing.TESTReconfigurationClient" methods="${test}"/>
            <formatter type="plain" usefile="false"/>
            <jvmarg value="-ea"/>
            <jvmarg value="-Djava.util.logging.config.file=logging.properties"/>
            <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.trustStore=conf/keyStore/node100.jks"/>
            <jvmarg value="-Djavax.net.ssl.keyStorePassword=qwerty"/>
            <jvmarg value="-Djavax.net.ssl.keyStore=conf/keyStore/node100.jks"/>
            <classpath>
                <pathelement location="${build.test.classes.dir}"/>
            </classpath>
            <!-- Make sure these libraries are included -->
            <classpath refid="classpath.test"/>
        </junit>
    </target>

    <target name="all" depends="clean,jar"
            description="build all files"/>

    <target name="buildnumber" description="Generates version number and sets it in properties file.">
        <buildnumber file="build.number"/>

        <property name="version.code"
                  value="${build.major.number}.${build.minor.number}.${build.revision.number}_build${build.number}"/>

        <echo>Version: ${version.code}</echo>

    </target>


    <property file="build.properties"/>
    <property name="build.mmr.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>

    <target name="current-number">
        <echo>Current build number:${build.mmr.number}</echo>
    </target>

    <target name="revision">
        <propertyfile file="build.properties">
            <entry key="build.revision.number" type="int" operation="+" value="1" pattern="00"/>
        </propertyfile>
    </target>

    <target name="minor">
        <propertyfile file="build.properties">
            <entry key="build.minor.number" type="int" operation="+" value="1" pattern="00"/>
            <entry key="build.revision.number" type="int" value="0" pattern="00"/>
        </propertyfile>
    </target>

    <target name="major">
        <propertyfile file="build.properties">
            <entry key="build.major.number" type="int" operation="+" value="1" pattern="00"/>
            <entry key="build.minor.number" type="int" value="0" pattern="00"/>
            <entry key="build.revision.number" type="int" value="0" pattern="00"/>
        </propertyfile>
    </target>

    <target name="niorevision">
        <propertyfile file="build.properties">
            <entry key="no.build.revision.number" type="int" operation="+" value="1" pattern="00"/>
        </propertyfile>
    </target>

    <target name="niominor">
        <propertyfile file="build.properties">
            <entry key="nio.build.minor.number" type="int" operation="+" value="1" pattern="00"/>
            <entry key="build.revision.number" type="int" value="0" pattern="00"/>
        </propertyfile>
    </target>

    <target name="niomajor">
        <propertyfile file="build.properties">
            <entry key="nio.build.major.number" type="int" operation="+" value="1" pattern="00"/>
            <entry key="build.minor.number" type="int" value="0" pattern="00"/>
            <entry key="build.revision.number" type="int" value="0" pattern="00"/>
        </propertyfile>
    </target>

    <fail message="Ant 1.10.4+ is required!">
        <condition>
            <not>
                <antversion atleast="1.10.4"/>
            </not>
        </condition>
    </fail>

    <!-- begin build configuration for junit5 tests -->
    <path id="junit5.lib.jars">
        <pathelement location="${lib.dir}/junit-jupiter-api-5.11.1.jar"/>
        <pathelement location="${lib.dir}/junit-jupiter-engine-5.11.1.jar"/>
        <pathelement location="${lib.dir}/junit-platform-engine-1.11.1.jar"/>
        <pathelement location="${lib.dir}/junit-platform-launcher-1.11.1.jar"/>
        <pathelement location="${lib.dir}/junit-platform-commons-1.11.1.jar"/>
        <pathelement location="${lib.dir}/junit-platform-console-standalone-1.11.3.jar"/>
        <pathelement location="${lib.dir}/junit-4.12.jar"/>
        <pathelement location="${lib.dir}/junit-vintage-engine-5.11.1.jar"/>
        <pathelement location="${lib.dir}/opentest4j-1.3.0.jar"/>
        <pathelement location="${lib.dir}/apiguardian-api-1.1.2.jar"/>
    </path>

    <target name="xdn-compile-tests">
        <echo message="Compiling all tests inside the ./test/ directory ..."/>
        <mkdir dir="build/test-classes"/>
        <javac srcdir="test"
               destdir="build/test-classes"
               includeantruntime="false">
            <classpath>
                <pathelement path="build/classes"/>
                <path refid="classpath.test"/>
                <path refid="junit5.lib.jars"/>
            </classpath>
        </javac>
    </target>

    <target name="xdn-unit-tests"
            description="Run all unit tests inside the './test/' directory"
            depends="xdn-compile-tests">
        <echo message="Running all the tests, reporting the results into './out/junit5-test-output/' ..."/>
        <!-- prepare the tests output directory -->
        <mkdir dir="out/junit5-test-output"/>
        <junitlauncher printSummary="true" haltOnFailure="false">
            <!-- include the JUnit platform related libraries required to run the tests -->
            <classpath refid="junit5.lib.jars"/>

            <!-- the tested classes themselves -->
            <classpath location="build/classes"/>
            <classpath location="build/test-classes"/>
            <classpath refid="classpath.base"/>

            <testclasses outputdir="out/junit5-test-output">
                <fileset dir="build/test-classes">
                    <include name="**/Xdn*Test.class"/>
                </fileset>
                <listener type="legacy-plain" sendSysOut="true" />
                <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="xdn-unit-tests-console" depends="xdn-compile-tests"
            description="Run all unit tests inside the test/ directory using the console launcher">
        <java classname="org.junit.platform.console.ConsoleLauncher" fork="true" failOnError="false">
            <redirector output="out/junit-test-output.txt" alwayslog="true"/>
            <!-- Enable assertion -->
            <assertions>
                <enable/>
            </assertions>
            <classpath refid="classpath.base"/>
            <classpath refid="junit5.lib.jars"/>
            <classpath location="build/classes"/>
            <classpath location="build/test-classes"/>
            <arg value="--scan-classpath"/>
            <arg line="--details=verbose"/>
            <arg line="--reports-dir=out/junit-test-report"/>
        </java>
    </target>

</project>
