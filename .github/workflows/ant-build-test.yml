# This workflow will test and build a Java project with Ant
# For more information see: 
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-ant

name: "XDN test workflow"

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'oracle'
    - name: 📦 Set up Docker  # Required for XdnTestCluster tests
      uses: docker-practice/actions-setup-docker@master
      timeout-minutes: 12
    - name: 📦 Verify Docker installation
      run: |
        set -x
        docker version
        docker run --rm hello-world
        docker pull fadhilkurnia/xdn-bookcatalog
    - name: 🔄 Set up Rsync  # Required for default PrimaryBackup setup
      uses: GuillaumeFalourd/setup-rsync@v1.2
    - name: 🔄 Set up Fuse  # Required for PrimaryBackup setup
      run: |
        set -x  # Enable command echo for debugging
        sudo apt-get update
        sudo apt-get install -y pkg-config libfuse3-dev fuse3
        sudo modprobe fuse  # Ensure FUSE kernel module is loaded
        sudo sed -i 's/#user_allow_other/user_allow_other/g' /etc/fuse.conf
        # Verify FUSE setup
        ls -l /dev/fuse
        grep user_allow_other /etc/fuse.conf
        fusermount3 -V
    - name: 🏗️ Compiling the source code into a jar archive and prepare binaries ...
      run: |
        ant jar
        ln -s -- "$(pwd)/bin/fuselog" /usr/local/bin/fuselog
        ln -s -- "$(pwd)/bin/fuselog-apply" /usr/local/bin/fuselog-apply
        ln -s -- "$(pwd)/bin/xdn" /usr/local/bin/xdn
        ln -s -- "$(pwd)/bin/xdnd" /usr/local/bin/xdnd
    # - name: 🧪 Running reconfiguration tests with ant ...
    #   run: ant test
    - name: 🔧 Setup JUnit dependencies
      run: |
        # Download JUnit Platform Console standalone jar
        wget https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.11.3/junit-platform-console-standalone-1.11.3.jar -P lib/

    - name: 🧪 Running XDN unit tests with ant ...
      run: |
        set -o pipefail
        # Enable more verbose JUnit output
        export JUNIT_REPORT_STACK=true
        # Set system properties for debugging
        export ANT_OPTS="-Dlog4j.configuration=conf/log4j.properties \
                        -Djava.util.logging.config.file=conf/logging.properties \
                        -Djunit.jupiter.execution.parallel.enabled=false \
                        -Djunit.platform.reporting.open.xml.enabled=true \
                        -Djunit.platform.output.capture.stdout=true \
                        -Djunit.platform.output.capture.stderr=true"
        # Run tests with verbose output and system output capture
        ant -Ddebug=true -v xdn-unit-tests 2>&1 | tee ant-xdn-unit-tests.log

        # Print JVM info and system properties for debugging
        java -XshowSettings:properties -version
    - name: 🪲 Display test log and debug info
      if: always()  # Run even if tests fail
      run: |
        echo "=== System Information ==="
        uname -a
        free -h
        df -h
        mount | grep fuse || true
        
        echo "=== Java Environment ==="
        java -version
        echo $JAVA_HOME
        echo $ANT_OPTS
        
        echo "=== Directory Structure ==="
        ls -R lib/
        ls -R out/
        
        echo "=== Test Output Files ==="
        find out/junit5-test-output -type f -ls
        
        echo "=== Test Results ==="
        for each in out/junit5-test-output/TEST-edu.umass.cs.xdn.*.txt; do
          [ -f "$each" ] || continue
          echo "============ BEGIN $each ============"
          cat "$each"
          echo "============ END $each ============"
        done
        
        echo "=== Build and Test Log ==="
        cat ant-xdn-unit-tests.log
        
        echo "=== System Logs ==="
        dmesg | tail -n 100 || true
        journalctl -n 100 || true
    - name: 🔎 Checking the output directory structure ...
      run: ls out/**/*.xml
    - name: 📝 Reporting the test results ...
      uses: dorny/test-reporter@v2
      if: ${{ !cancelled() }}                     # run this step even if previous step failed
      with:
        name: 'Unit tests'
        path: 'out/**/*.xml'
        reporter: 'java-junit'
#    We disable the step below, but this might be needed for checking PR from forked repositories.
#    - name: 📝 Gathering the test result ...
#      uses: actions/upload-artifact@v4            # upload test results
#      if: ${{ !cancelled() }}                     # run this step even if previous step failed
#      with:
#        name: test-results
#        path: 'out/**/*.xml'