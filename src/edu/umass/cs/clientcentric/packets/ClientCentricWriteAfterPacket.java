package edu.umass.cs.clientcentric.packets;

import edu.umass.cs.clientcentric.VectorTimestamp;
import edu.umass.cs.gigapaxos.interfaces.AppRequestParser;
import edu.umass.cs.gigapaxos.interfaces.ClientRequest;
import edu.umass.cs.gigapaxos.interfaces.Request;
import edu.umass.cs.nio.interfaces.IntegerPacketType;
import edu.umass.cs.reconfiguration.reconfigurationutils.RequestParseException;
import edu.umass.cs.xdn.interfaces.behavior.BehavioralRequest;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.logging.Level;
import java.util.logging.Logger;

public class ClientCentricWriteAfterPacket extends ClientCentricPacket {

    // FIXME: replace VectorTimestamp with SequenceNumber that is more compact.
    private final VectorTimestamp timestamp;
    private final ClientRequest clientWriteOnlyRequest;
    private final long packetID;
    private final String senderID;

    public ClientCentricWriteAfterPacket(String senderID, VectorTimestamp timestamp,
                                         ClientRequest clientWriteOnlyRequest) {
        this(System.currentTimeMillis(), senderID, timestamp, clientWriteOnlyRequest);
    }

    private ClientCentricWriteAfterPacket(long packetID, String senderID, VectorTimestamp timestamp,
                                         ClientRequest clientWriteOnlyRequest) {
        super(ClientCentricPacketType.CLIENT_CENTRIC_WRITE_AFTER_PACKET);
        assert packetID != 0 : "A likely invalid packetID given";
        assert senderID != null : "The sender cannot be null";
        assert timestamp != null : "The timestamp cannot be null";
        assert clientWriteOnlyRequest != null : "The provided ClientRequest cannot be null";
        assert (clientWriteOnlyRequest instanceof BehavioralRequest br && br.isWriteOnlyRequest()) :
                "The provided ClientRequest must be a WriteOnlyRequest";
        this.packetID = packetID;
        this.senderID = senderID;
        this.timestamp = timestamp;
        this.clientWriteOnlyRequest = clientWriteOnlyRequest;
    }

    @Override
    protected JSONObject toJSONObjectImpl() throws JSONException {
        JSONObject object = new JSONObject();
        object.put("id", this.packetID);
        object.put("req", this.clientWriteOnlyRequest.toString());
        object.put("sid", this.senderID);
        object.put("ts", this.timestamp.toString());
        return object;
    }

    @Override
    public IntegerPacketType getRequestType() {
        return ClientCentricPacketType.CLIENT_CENTRIC_WRITE_AFTER_PACKET;
    }

    @Override
    public String getServiceName() {
        return this.clientWriteOnlyRequest.getServiceName();
    }

    @Override
    public long getRequestID() {
        return this.packetID;
    }

    @Override
    public boolean needsCoordination() {
        return true;
    }

    public String getSenderID() {
        return senderID;
    }

    public ClientRequest getClientWriteOnlyRequest() {
        return clientWriteOnlyRequest;
    }

    public VectorTimestamp getTimestamp() {
        return timestamp;
    }

    /**
     * Initialize a ClientCentricWriteAfterPacket given JSONObject and AppRequestParser, which is
     * needed because ClientCentricWriteAfterPacket also needs to deserialize AppRequest
     * (i.e., ClientRequest) that is wrapped inside ClientCentricWriteAfterPacket.
     *
     * @param jsonObject a valid serialized JSONObject from a ClientCentricWriteAfterPacket,
     *                   generated by {@link ClientCentricWriteAfterPacket#toJSONObjectImpl()}.
     * @param appRequestParser deserializer to parse ClientRequest embedded inside
     *                         the {@param jsonObject}.
     * @return ClientCentricWriteAfterPacket if deserialization process is success, otherwise null.
     */
    public static ClientCentricWriteAfterPacket fromJsonObject(JSONObject jsonObject,
                                                               AppRequestParser appRequestParser) {
        assert jsonObject != null : "The provided JSONObject can not be null";
        assert appRequestParser != null : "The provided appRequestParser can not be null";
        assert jsonObject.has("id") : "Unknown ID from the encoded packet";
        assert jsonObject.has("req") : "Unknown user request from the encoded packet";
        assert jsonObject.has("sid") : "Unknown sender ID from the encoded packet";
        assert jsonObject.has("ts") : "Unknown timestamp from the encoded packet";
        try {
            long requestID = jsonObject.getLong("id");
            String senderID = jsonObject.getString("sid");
            String encodedTimestamp = jsonObject.getString("ts");
            VectorTimestamp timestamp = VectorTimestamp.createFromString(encodedTimestamp);
            String encodedClientRequest = jsonObject.getString("req");
            Request clientRequest = appRequestParser.getRequest(encodedClientRequest);
            assert (clientRequest instanceof ClientRequest) :
                    "The request inside ClientCentricWriteAfterPacket " +
                            "must implement ClientRequest interface";
            assert (clientRequest instanceof BehavioralRequest br && br.isWriteOnlyRequest()) :
                    "The client request inside ClientCentricWriteAfterPacket " +
                            "must be WriteOnlyRequest";
            return new ClientCentricWriteAfterPacket(
                    requestID, senderID, timestamp, (ClientRequest) clientRequest);
        } catch (JSONException | RequestParseException e) {
            Logger.getGlobal().log(Level.SEVERE, "Receiving an invalid encoded " +
                    "ClientCentricWriteAfterPacket");
            return null;
        }
    }

}
